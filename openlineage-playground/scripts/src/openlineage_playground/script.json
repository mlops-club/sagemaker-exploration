SET START_DATE = CURRENT_DATE - 730 /* *
 * This SQL script creates temporary tables and performs various calculations and transformations on the data to generate inventory-related information.
 * The script starts by setting the start and end dates for the analysis period.
 * It then creates temporary tables to store intermediate results.
 * The first temporary table (_ASINS) selects distinct ordering regions, brands, and ASINs from the RPT_DAILY_SALES table.
 * The second temporary table (_PARENT_ASINS) retrieves ordering regions, parent ASINs, and ASINs.
 * The third temporary table (_PRODUCTS) combines the data from the previous two tables to get the final list of ordering regions, brands, parent ASINs, and ASINs.
 * The script then creates another temporary table (_D2C) using CTEs to calculate the D2C forecast for each master ID and marketplace.
 * Next, the script creates the _TEMP_INVENTORY table by joining various tables and aggregating the inventory data.
 * The _INVENTORY_POSITION table is created by further aggregating the data from _TEMP_INVENTORY.
 * The script then creates the _DATE_WINDOW table to represent all the dates within the analysis period.
 * The _ASIN_DATES table is created to ensure that all dates are represented for each ASIN.
 * Finally, the _INVENTORY_DATES table is created by joining the _INVENTORY_POSITION and _ASIN_DATES tables.
 * The script also creates the _OUT_OF_STOCK table to identify ASINs that are out of stock on specific dates.
 */
{"in_tables": [], "out_tables": [] "column_lineage": []}

SET END_DATE = CURRENT_DATE
{"in_tables": [], "out_tables": [] "column_lineage": []}

USE SCHEMA PATTERN_DB.DATA_SCIENCE_STAGE
{"in_tables": [], "out_tables": [] "column_lineage": []}

CREATE OR REPLACE TEMPORARY TABLE _ASINS AS SELECT DISTINCT ORDERING_REGION, VENDOR_ID, VENDOR_NAME AS BRAND, ASIN FROM ANALYTICS_DB.CORE.RPT_DAILY_SALES AS S WHERE UPPER(MARKETPLACE) ILIKE '%AMAZON%' AND DATE > CAST(@START_DATE AS DATE) - 365 AND REVENUE_TOTAL > 0
{"in_tables": [DbTableMeta(DbTableMeta { database: Some("ANALYTICS_DB"), schema: Some("CORE"), name: "RPT_DAILY_SALES", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false })], "out_tables": [DbTableMeta(DbTableMeta { database: None, schema: Some("PATTERN_DB.DATA_SCIENCE_STAGE"), name: "_ASINS", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false })] "column_lineage": [ColumnLineage { descendant: ColumnMeta(ColumnMeta { origin: None, name: "ASIN" }), lineage: [ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: Some("ANALYTICS_DB"), schema: Some("CORE"), name: "RPT_DAILY_SALES", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "ASIN" })] }, ColumnLineage { descendant: ColumnMeta(ColumnMeta { origin: None, name: "BRAND" }), lineage: [ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: Some("ANALYTICS_DB"), schema: Some("CORE"), name: "RPT_DAILY_SALES", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "VENDOR_NAME" })] }, ColumnLineage { descendant: ColumnMeta(ColumnMeta { origin: None, name: "ORDERING_REGION" }), lineage: [ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: Some("ANALYTICS_DB"), schema: Some("CORE"), name: "RPT_DAILY_SALES", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "ORDERING_REGION" })] }, ColumnLineage { descendant: ColumnMeta(ColumnMeta { origin: None, name: "VENDOR_ID" }), lineage: [ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: Some("ANALYTICS_DB"), schema: Some("CORE"), name: "RPT_DAILY_SALES", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "VENDOR_ID" })] }]}

CREATE OR REPLACE TEMPORARY TABLE _PARENT_ASINS AS SELECT ORDERING_REGION, PARENT_ASIN, ASIN FROM PATTERN_DB.DATA_SCIENCE.ASIN_PARENT_MAPPING AS A JOIN PATTERN_DB.PUBLIC.ORDERING_REGIONS AS O ON O.COUNTRY_CODE = A.COUNTRY_CODE
{"in_tables": [DbTableMeta(DbTableMeta { database: Some("PATTERN_DB"), schema: Some("DATA_SCIENCE"), name: "ASIN_PARENT_MAPPING", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), DbTableMeta(DbTableMeta { database: Some("PATTERN_DB"), schema: Some("PUBLIC"), name: "ORDERING_REGIONS", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false })], "out_tables": [DbTableMeta(DbTableMeta { database: None, schema: Some("PATTERN_DB.DATA_SCIENCE_STAGE"), name: "_PARENT_ASINS", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false })] "column_lineage": [ColumnLineage { descendant: ColumnMeta(ColumnMeta { origin: None, name: "ASIN" }), lineage: [ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: Some("PATTERN_DB"), schema: Some("DATA_SCIENCE"), name: "ASIN_PARENT_MAPPING", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "ASIN" })] }, ColumnLineage { descendant: ColumnMeta(ColumnMeta { origin: None, name: "ORDERING_REGION" }), lineage: [ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: Some("PATTERN_DB"), schema: Some("DATA_SCIENCE"), name: "ASIN_PARENT_MAPPING", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "ORDERING_REGION" })] }, ColumnLineage { descendant: ColumnMeta(ColumnMeta { origin: None, name: "PARENT_ASIN" }), lineage: [ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: Some("PATTERN_DB"), schema: Some("DATA_SCIENCE"), name: "ASIN_PARENT_MAPPING", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "PARENT_ASIN" })] }]}

CREATE OR REPLACE TEMPORARY TABLE _PRODUCTS AS SELECT A.ORDERING_REGION, A.BRAND, COALESCE(P.PARENT_ASIN, A.ASIN) AS PARENT_ASIN, A.ASIN AS ASIN FROM _ASINS AS A LEFT JOIN _PARENT_ASINS AS P ON A.ASIN = P.ASIN AND A.ORDERING_REGION = P.ORDERING_REGION
{"in_tables": [DbTableMeta(DbTableMeta { database: None, schema: Some("PATTERN_DB.DATA_SCIENCE_STAGE"), name: "_ASINS", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), DbTableMeta(DbTableMeta { database: None, schema: Some("PATTERN_DB.DATA_SCIENCE_STAGE"), name: "_PARENT_ASINS", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false })], "out_tables": [DbTableMeta(DbTableMeta { database: None, schema: Some("PATTERN_DB.DATA_SCIENCE_STAGE"), name: "_PRODUCTS", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false })] "column_lineage": [ColumnLineage { descendant: ColumnMeta(ColumnMeta { origin: None, name: "ASIN" }), lineage: [ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: None, schema: Some("PATTERN_DB.DATA_SCIENCE_STAGE"), name: "_ASINS", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "ASIN" })] }, ColumnLineage { descendant: ColumnMeta(ColumnMeta { origin: None, name: "BRAND" }), lineage: [ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: None, schema: Some("PATTERN_DB.DATA_SCIENCE_STAGE"), name: "_ASINS", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "BRAND" })] }, ColumnLineage { descendant: ColumnMeta(ColumnMeta { origin: None, name: "ORDERING_REGION" }), lineage: [ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: None, schema: Some("PATTERN_DB.DATA_SCIENCE_STAGE"), name: "_ASINS", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "ORDERING_REGION" })] }, ColumnLineage { descendant: ColumnMeta(ColumnMeta { origin: None, name: "PARENT_ASIN" }), lineage: [ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: None, schema: Some("PATTERN_DB.DATA_SCIENCE_STAGE"), name: "_ASINS", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "ASIN" }), ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: None, schema: Some("PATTERN_DB.DATA_SCIENCE_STAGE"), name: "_PARENT_ASINS", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "PARENT_ASIN" })] }]}

/* Create the D2C table */ CREATE OR REPLACE TEMPORARY TABLE _D2C AS WITH D2C AS (SELECT MASTER_ID, MARKETPLACE, WEEK_START, COALESCE(BASE_RATE_OVERWRITE, BASE_RATE) AS F1, COALESCE(PROMO_INCREASE_OVERWRITE, PROMO_INCREASE) AS F2, COALESCE(SEASONAL_INCREASE_OVERWRITE, SEASONAL_INCREASE) AS F3, F1 + F2 + F3 AS FORECAST FROM PATTERN_DB.BRAND_MANAGEMENT._TEMP_CURRENT_FORECAST_DATA_FOR_ORDERING_FILES WHERE TRUE AND NOT MARKETPLACE IN ('Amazon', 'Walmart') AND COUNTRY_CODE = 'US' AND WEEK_START BETWEEN (CAST(GETDATE() AS DATE) - 7) AND (CAST(GETDATE() AS DATE) + 21)), FORECAST AS (SELECT D2C.MASTER_ID, MARKETPLACE, AVG(FORECAST) AS D2C_FORECAST FROM D2C GROUP BY D2C.MASTER_ID, D2C.MARKETPLACE), PREP AS (SELECT WOC.MASTER_ID, WOC.MARKETPLACE, COALESCE(EXTRA_WEEKS_OF_SUPPLY_OVERWRITE, SAFETY_STOCK) AS D2C_WOC, SUM(D2C_FORECAST) AS D2C_FORECAST FROM PATTERN_DB.BRAND_MANAGEMENT.CURRENT_ALL_PROD_ORDERING_FILES AS WOC LEFT JOIN FORECAST ON WOC.MASTER_ID = FORECAST.MASTER_ID AND WOC.MARKETPLACE = FORECAST.MARKETPLACE WHERE NOT WOC.MARKETPLACE IN ('Amazon', 'Walmart') AND ORDERING_REGION_ALT = 'US' GROUP BY WOC.MASTER_ID, WOC.MARKETPLACE, EXTRA_WEEKS_OF_SUPPLY_OVERWRITE, SAFETY_STOCK) SELECT MASTER_ID, SUM(D2C_WOC * D2C_FORECAST) AS D2C_RESERVE FROM PREP AS P GROUP BY MASTER_ID
{"in_tables": [], "out_tables": [DbTableMeta(DbTableMeta { database: None, schema: Some("PATTERN_DB.DATA_SCIENCE_STAGE"), name: "_D2C", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false })] "column_lineage": [ColumnLineage { descendant: ColumnMeta(ColumnMeta { origin: None, name: "D2C_RESERVE" }), lineage: [ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: Some("PATTERN_DB"), schema: Some("BRAND_MANAGEMENT"), name: "CURRENT_ALL_PROD_ORDERING_FILES", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "D2C_FORECAST" }), ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: Some("PATTERN_DB"), schema: Some("BRAND_MANAGEMENT"), name: "CURRENT_ALL_PROD_ORDERING_FILES", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "EXTRA_WEEKS_OF_SUPPLY_OVERWRITE" }), ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: Some("PATTERN_DB"), schema: Some("BRAND_MANAGEMENT"), name: "CURRENT_ALL_PROD_ORDERING_FILES", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "SAFETY_STOCK" })] }, ColumnLineage { descendant: ColumnMeta(ColumnMeta { origin: None, name: "MASTER_ID" }), lineage: [ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: Some("PATTERN_DB"), schema: Some("BRAND_MANAGEMENT"), name: "CURRENT_ALL_PROD_ORDERING_FILES", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "MASTER_ID" })] }]}

CREATE OR REPLACE TEMPORARY TABLE _TEMP_INVENTORY AS WITH INVENTORY AS (SELECT P.ASIN, P.ORDERING_REGION, INV.DATE, INV.STG_CATALOG__MARKETPLACES__NAME AS MARKETPLACE, INV.LISTING_FULFILLMENT_PROGRAM AS PROGRAM, SUM(CASE WHEN L.LISTING_FULFILLMENT_TYPE = 'FBM' THEN COALESCE(INV.WAREHOUSE_STOW_QUANTITY, 0) ELSE 0 END) AS AVAILABLE_FBM, SUM(COALESCE(INV.AVAILABLE_FBA_QUANTITY, 0)) AS AVAILABLE_FBA, SUM(CASE WHEN L.LISTING_FULFILLMENT_TYPE = 'FBM' THEN COALESCE(INV.WAREHOUSE_STOW_QUANTITY, 0) ELSE 0 END) + SUM(COALESCE(INV.AVAILABLE_FBA_QUANTITY, 0)) AS TOTAL_AVAILABLE, MIN(INV.DATE) OVER (PARTITION BY P.ASIN, P.ORDERING_REGION) AS FIRST_DATE, SUM(COALESCE(INV.INBOUND_FBA_QUANTITY, 0) + COALESCE(INV.WAREHOUSE_TOTAL_QUANTITY, 0) + COALESCE(INV.RESERVED_FC_TRANSFER_FBA_QUANTITY, 0) + COALESCE(INV.RESERVED_FC_PROCESSING_FBA_QUANTITY, 0)) AS TOTAL_COMING_INVENTORY, SUM(COALESCE(INV.RESERVED_FC_TRANSFER_FBA_QUANTITY, 0)) AS RESERVED_FC_TRANSFER_FBA_QUANTITY, SUM(COALESCE(INV.RESERVED_FC_PROCESSING_FBA_QUANTITY, 0)) AS RESERVED_FC_PROCESSING_FBA_QUANTITY, SUM(COALESCE(INV.WAREHOUSE_TOTAL_QUANTITY, 0)) AS WAREHOUSE_TOTAL_QUANTITY, SUM(COALESCE(INV.INBOUND_FBA_QUANTITY, 0)) AS INBOUND_FBA_QUANTITY, MAX(COALESCE(INV.WHOLESALE_PRICE, 0)) AS WHOLESALE_PRICE, MAX(INV.STG_AMACZAR__VENDORS__VENDOR_NAME) AS BRAND, SUM(COALESCE(INV.ON_ORDER_QUANTITY, 0)) AS ON_ORDER_QUANTITY, SUM(COALESCE(INV.WAREHOUSE_PROCESSING_QUANTITY, 0)) AS WAREHOUSE_PROCESSING_QUANTITY, SUM(COALESCE(D.D2C_RESERVE, 0)) AS D2C_RESERVE FROM ANALYTICS_DB.CORE.INVENTORY__LISTING_LEVEL__TOTAL_PIPELINE__BY_DATE_AND_LATEST AS INV JOIN PATTERN_DB.PUBLIC.ORDERING_REGIONS AS O ON O.COUNTRY_CODE = INV.COUNTRY_CODE JOIN _PRODUCTS AS P ON P.ORDERING_REGION = O.ORDERING_REGION AND P.ASIN = INV.LISTING_MP_PAGE_ID LEFT JOIN ANALYTICS_DB.STG_CATALOG.STG_CATALOG__LISTINGS AS L ON L.LISTING_MP_PAGE_ID = INV.LISTING_MP_PAGE_ID FULL JOIN _D2C AS D ON D.MASTER_ID = INV.MASTER_ID WHERE INV.DATE >= @START_DATE AND INV.DATE <= @END_DATE AND ASIN ILIKE 'B0%' AND UPPER(MARKETPLACE) ILIKE '%AMAZON%' AND INV.IS_DISCONTINUED_HISTORIC = FALSE OR INV.IS_DISCONTINUED_HISTORIC IS NULL GROUP BY 1, 2, 3, 4, 5) SELECT ASIN, ORDERING_REGION, DATE, MAX(AVAILABLE_FBM) AS AVAILABLE_FBM, MAX(AVAILABLE_FBA) AS AVAILABLE_FBA, MAX(AVAILABLE_FBM) + MAX(AVAILABLE_FBA) AS TOTAL_AVAILABLE, MIN(FIRST_DATE) AS FIRST_DATE, MAX(TOTAL_COMING_INVENTORY) AS TOTAL_COMING_INVENTORY, MAX(RESERVED_FC_TRANSFER_FBA_QUANTITY) AS SUM_RESERVED_FC_TRANSFER_FBA_QUANTITY, MAX(RESERVED_FC_PROCESSING_FBA_QUANTITY) AS SUM_RESERVED_FC_PROCESSING_FBA_QUANTITY, MAX(WAREHOUSE_TOTAL_QUANTITY) AS SUM_WAREHOUSE_TOTAL_QUANTITY, MAX(INBOUND_FBA_QUANTITY) AS SUM_INBOUND_FBA_QUANTITY, MAX(WHOLESALE_PRICE) AS WHOLESALE_PRICE, MAX(BRAND) AS BRAND, MAX(ON_ORDER_QUANTITY) AS SUM_ON_ORDER_QUANTITY, MAX(WAREHOUSE_PROCESSING_QUANTITY) AS SUM_WAREHOUSE_PROCESSING_QUANTITY, MAX(D2C_RESERVE) AS D2C_RESERVE FROM INVENTORY WHERE PROGRAM ILIKE '%PANEU%' GROUP BY 1, 2, 3 UNION SELECT ASIN, ORDERING_REGION, DATE, SUM(AVAILABLE_FBM) AS AVAILABLE_FBM, SUM(AVAILABLE_FBA) AS AVAILABLE_FBA, SUM(AVAILABLE_FBM) + SUM(AVAILABLE_FBA) AS TOTAL_AVAILABLE, MIN(FIRST_DATE) AS FIRST_DATE, SUM(TOTAL_COMING_INVENTORY) AS TOTAL_COMING_INVENTORY, SUM(RESERVED_FC_TRANSFER_FBA_QUANTITY) AS SUM_RESERVED_FC_TRANSFER_FBA_QUANTITY, SUM(RESERVED_FC_PROCESSING_FBA_QUANTITY) AS SUM_RESERVED_FC_PROCESSING_FBA_QUANTITY, SUM(WAREHOUSE_TOTAL_QUANTITY) AS SUM_WAREHOUSE_TOTAL_QUANTITY, SUM(INBOUND_FBA_QUANTITY) AS SUM_INBOUND_FBA_QUANTITY, MAX(WHOLESALE_PRICE) AS WHOLESALE_PRICE, MAX(BRAND) AS BRAND, SUM(ON_ORDER_QUANTITY) AS SUM_ON_ORDER_QUANTITY, SUM(WAREHOUSE_PROCESSING_QUANTITY) AS SUM_WAREHOUSE_PROCESSING_QUANTITY, SUM(D2C_RESERVE) AS D2C_RESERVE FROM INVENTORY WHERE PROGRAM ILIKE '%NARF%' OR PROGRAM IS NULL GROUP BY 1, 2, 3
{"in_tables": [], "out_tables": [DbTableMeta(DbTableMeta { database: None, schema: Some("PATTERN_DB.DATA_SCIENCE_STAGE"), name: "_TEMP_INVENTORY", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false })] "column_lineage": [ColumnLineage { descendant: ColumnMeta(ColumnMeta { origin: None, name: "ASIN" }), lineage: [ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: None, schema: Some("PATTERN_DB.DATA_SCIENCE_STAGE"), name: "_PRODUCTS", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "ASIN" })] }, ColumnLineage { descendant: ColumnMeta(ColumnMeta { origin: None, name: "AVAILABLE_FBA" }), lineage: [ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: Some("ANALYTICS_DB"), schema: Some("CORE"), name: "INVENTORY__LISTING_LEVEL__TOTAL_PIPELINE__BY_DATE_AND_LATEST", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "AVAILABLE_FBA_QUANTITY" })] }, ColumnLineage { descendant: ColumnMeta(ColumnMeta { origin: None, name: "AVAILABLE_FBM" }), lineage: [ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: Some("ANALYTICS_DB"), schema: Some("CORE"), name: "INVENTORY__LISTING_LEVEL__TOTAL_PIPELINE__BY_DATE_AND_LATEST", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "WAREHOUSE_STOW_QUANTITY" }), ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: Some("ANALYTICS_DB"), schema: Some("STG_CATALOG"), name: "STG_CATALOG__LISTINGS", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "LISTING_FULFILLMENT_TYPE" })] }, ColumnLineage { descendant: ColumnMeta(ColumnMeta { origin: None, name: "BRAND" }), lineage: [ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: Some("ANALYTICS_DB"), schema: Some("CORE"), name: "INVENTORY__LISTING_LEVEL__TOTAL_PIPELINE__BY_DATE_AND_LATEST", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "STG_AMACZAR__VENDORS__VENDOR_NAME" })] }, ColumnLineage { descendant: ColumnMeta(ColumnMeta { origin: None, name: "D2C_RESERVE" }), lineage: [ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: None, schema: Some("PATTERN_DB.DATA_SCIENCE_STAGE"), name: "_D2C", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "D2C_RESERVE" })] }, ColumnLineage { descendant: ColumnMeta(ColumnMeta { origin: None, name: "DATE" }), lineage: [ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: Some("ANALYTICS_DB"), schema: Some("CORE"), name: "INVENTORY__LISTING_LEVEL__TOTAL_PIPELINE__BY_DATE_AND_LATEST", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "DATE" })] }, ColumnLineage { descendant: ColumnMeta(ColumnMeta { origin: None, name: "FIRST_DATE" }), lineage: [ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: None, schema: Some("PATTERN_DB.DATA_SCIENCE_STAGE"), name: "_PRODUCTS", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "ASIN" }), ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: None, schema: Some("PATTERN_DB.DATA_SCIENCE_STAGE"), name: "_PRODUCTS", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "ORDERING_REGION" }), ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: Some("ANALYTICS_DB"), schema: Some("CORE"), name: "INVENTORY__LISTING_LEVEL__TOTAL_PIPELINE__BY_DATE_AND_LATEST", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "DATE" })] }, ColumnLineage { descendant: ColumnMeta(ColumnMeta { origin: None, name: "ORDERING_REGION" }), lineage: [ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: None, schema: Some("PATTERN_DB.DATA_SCIENCE_STAGE"), name: "_PRODUCTS", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "ORDERING_REGION" })] }, ColumnLineage { descendant: ColumnMeta(ColumnMeta { origin: None, name: "SUM_INBOUND_FBA_QUANTITY" }), lineage: [ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: Some("ANALYTICS_DB"), schema: Some("CORE"), name: "INVENTORY__LISTING_LEVEL__TOTAL_PIPELINE__BY_DATE_AND_LATEST", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "INBOUND_FBA_QUANTITY" })] }, ColumnLineage { descendant: ColumnMeta(ColumnMeta { origin: None, name: "SUM_ON_ORDER_QUANTITY" }), lineage: [ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: Some("ANALYTICS_DB"), schema: Some("CORE"), name: "INVENTORY__LISTING_LEVEL__TOTAL_PIPELINE__BY_DATE_AND_LATEST", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "ON_ORDER_QUANTITY" })] }, ColumnLineage { descendant: ColumnMeta(ColumnMeta { origin: None, name: "SUM_RESERVED_FC_PROCESSING_FBA_QUANTITY" }), lineage: [ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: Some("ANALYTICS_DB"), schema: Some("CORE"), name: "INVENTORY__LISTING_LEVEL__TOTAL_PIPELINE__BY_DATE_AND_LATEST", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "RESERVED_FC_PROCESSING_FBA_QUANTITY" })] }, ColumnLineage { descendant: ColumnMeta(ColumnMeta { origin: None, name: "SUM_RESERVED_FC_TRANSFER_FBA_QUANTITY" }), lineage: [ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: Some("ANALYTICS_DB"), schema: Some("CORE"), name: "INVENTORY__LISTING_LEVEL__TOTAL_PIPELINE__BY_DATE_AND_LATEST", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "RESERVED_FC_TRANSFER_FBA_QUANTITY" })] }, ColumnLineage { descendant: ColumnMeta(ColumnMeta { origin: None, name: "SUM_WAREHOUSE_PROCESSING_QUANTITY" }), lineage: [ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: Some("ANALYTICS_DB"), schema: Some("CORE"), name: "INVENTORY__LISTING_LEVEL__TOTAL_PIPELINE__BY_DATE_AND_LATEST", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "WAREHOUSE_PROCESSING_QUANTITY" })] }, ColumnLineage { descendant: ColumnMeta(ColumnMeta { origin: None, name: "SUM_WAREHOUSE_TOTAL_QUANTITY" }), lineage: [ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: Some("ANALYTICS_DB"), schema: Some("CORE"), name: "INVENTORY__LISTING_LEVEL__TOTAL_PIPELINE__BY_DATE_AND_LATEST", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "WAREHOUSE_TOTAL_QUANTITY" })] }, ColumnLineage { descendant: ColumnMeta(ColumnMeta { origin: None, name: "TOTAL_AVAILABLE" }), lineage: [ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: Some("ANALYTICS_DB"), schema: Some("CORE"), name: "INVENTORY__LISTING_LEVEL__TOTAL_PIPELINE__BY_DATE_AND_LATEST", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "AVAILABLE_FBA_QUANTITY" }), ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: Some("ANALYTICS_DB"), schema: Some("CORE"), name: "INVENTORY__LISTING_LEVEL__TOTAL_PIPELINE__BY_DATE_AND_LATEST", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "WAREHOUSE_STOW_QUANTITY" }), ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: Some("ANALYTICS_DB"), schema: Some("STG_CATALOG"), name: "STG_CATALOG__LISTINGS", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "LISTING_FULFILLMENT_TYPE" })] }, ColumnLineage { descendant: ColumnMeta(ColumnMeta { origin: None, name: "TOTAL_COMING_INVENTORY" }), lineage: [ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: Some("ANALYTICS_DB"), schema: Some("CORE"), name: "INVENTORY__LISTING_LEVEL__TOTAL_PIPELINE__BY_DATE_AND_LATEST", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "INBOUND_FBA_QUANTITY" }), ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: Some("ANALYTICS_DB"), schema: Some("CORE"), name: "INVENTORY__LISTING_LEVEL__TOTAL_PIPELINE__BY_DATE_AND_LATEST", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "RESERVED_FC_PROCESSING_FBA_QUANTITY" }), ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: Some("ANALYTICS_DB"), schema: Some("CORE"), name: "INVENTORY__LISTING_LEVEL__TOTAL_PIPELINE__BY_DATE_AND_LATEST", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "RESERVED_FC_TRANSFER_FBA_QUANTITY" }), ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: Some("ANALYTICS_DB"), schema: Some("CORE"), name: "INVENTORY__LISTING_LEVEL__TOTAL_PIPELINE__BY_DATE_AND_LATEST", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "WAREHOUSE_TOTAL_QUANTITY" })] }, ColumnLineage { descendant: ColumnMeta(ColumnMeta { origin: None, name: "WHOLESALE_PRICE" }), lineage: [ColumnMeta(ColumnMeta { origin: Some(DbTableMeta { database: Some("ANALYTICS_DB"), schema: Some("CORE"), name: "INVENTORY__LISTING_LEVEL__TOTAL_PIPELINE__BY_DATE_AND_LATEST", quote_style: Some(QuoteStyle { database: None, schema: None, name: None }), provided_namespace: false, provided_field_schema: false }), name: "WHOLESALE_PRICE" })] }]}

